// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Urbamais.Infra.Config;

#nullable disable

namespace Urbamais.Infra.Migrations
{
    [DbContext(typeof(ContextEf))]
    [Migration("20230607115743_AjusteInitial")]
    partial class AjusteInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("Uf")
                        .HasColumnType("integer")
                        .HasColumnName("uf");

                    b.HasKey("Id")
                        .HasName("cidade_id");

                    b.ToTable("cidade", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("endereco");

                    b.HasKey("Id")
                        .HasName("email_id");

                    b.ToTable("email", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bairro");

                    b.Property<int>("CidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("cidade_id");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complemento");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("endereco_id");

                    b.HasIndex("CidadeId");

                    b.ToTable("endereco", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero");

                    b.HasKey("Id")
                        .HasName("telefone_id");

                    b.ToTable("telefone", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Colaborador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<DateTime?>("DataValidadeCNH")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_validade_cnh");

                    b.Property<DateTime?>("DataValidadeExameAdmissional")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_validade_exame_admissional");

                    b.Property<string>("NumeroCNH")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("numero_cnh");

                    b.Property<string>("NumeroCarteiraTrabalho")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("numero_carteira_trabalho");

                    b.Property<string>("NumeroExameAdmissional")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numero_exame_admissional");

                    b.Property<string>("TipoCNH")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tipo_cnh");

                    b.HasKey("Id")
                        .HasName("colaborador_id");

                    b.ToTable("colaborador", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.HasKey("Id")
                        .HasName("fornecedor_id");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("InscricaoEstadual")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_estadual");

                    b.Property<string>("InscricaoMunicipal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("inscricao_municipal");

                    b.HasKey("Id")
                        .HasName("empresa_id");

                    b.ToTable("empresa", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("integer")
                        .HasColumnName("empresa_id");

                    b.HasKey("Id")
                        .HasName("obra_id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("obra", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descricao");

                    b.Property<int?>("PlanejamentoId")
                        .HasColumnType("integer");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("integer")
                        .HasColumnName("unidade_id");

                    b.HasKey("Id")
                        .HasName("insumo_id");

                    b.HasIndex("PlanejamentoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("insumo", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<int>("ObraId")
                        .HasColumnType("integer")
                        .HasColumnName("obra_id");

                    b.HasKey("Id")
                        .HasName("planejamento_id");

                    b.HasIndex("ObraId");

                    b.ToTable("planejamento", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.PlanejamentoInsumo", b =>
                {
                    b.Property<int>("PlanejamentoId")
                        .HasColumnType("integer")
                        .HasColumnName("planejamento_id");

                    b.Property<int>("InsumoId")
                        .HasColumnType("integer")
                        .HasColumnName("insumo_id");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_fim");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_inicio");

                    b.Property<double>("Quantidade")
                        .HasColumnType("double precision")
                        .HasColumnName("quantidade");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_unitario");

                    b.HasKey("PlanejamentoId", "InsumoId");

                    b.HasIndex("InsumoId");

                    b.ToTable("planejamento_insumo", (string)null);
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_alteracao");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_exclusao");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("descricao");

                    b.HasKey("Id")
                        .HasName("unidade_id");

                    b.ToTable("unidade", (string)null);
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "email_id");

                    b.HasIndex("email_id");

                    b.ToTable("colaboradores_emails");
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("colaboradores_enderecos");
                });

            modelBuilder.Entity("colaboradors_telefones", b =>
                {
                    b.Property<int>("colaborador_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("colaborador_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("colaboradors_telefones");
                });

            modelBuilder.Entity("empresas_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "empresa_id");

                    b.HasIndex("empresa_id");

                    b.ToTable("empresas_emails");
                });

            modelBuilder.Entity("empresas_enderecos", b =>
                {
                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.HasKey("empresa_id", "endereco_id");

                    b.HasIndex("endereco_id");

                    b.ToTable("empresas_enderecos");
                });

            modelBuilder.Entity("empresas_telefones", b =>
                {
                    b.Property<int>("empresa_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("empresa_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("empresas_telefones");
                });

            modelBuilder.Entity("fornecedoers_telefones", b =>
                {
                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.Property<int>("telefone_id")
                        .HasColumnType("integer");

                    b.HasKey("fornecedor_id", "telefone_id");

                    b.HasIndex("telefone_id");

                    b.ToTable("fornecedoers_telefones");
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.Property<int>("email_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("email_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_emails");
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.Property<int>("endereco_id")
                        .HasColumnType("integer");

                    b.Property<int>("fornecedor_id")
                        .HasColumnType("integer");

                    b.HasKey("endereco_id", "fornecedor_id");

                    b.HasIndex("fornecedor_id");

                    b.ToTable("fornecedores_enderecos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Cidade", b =>
                {
                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("CidadeId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("CidadeId");

                            b1.ToTable("cidade");

                            b1.WithOwner()
                                .HasForeignKey("CidadeId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Endereco", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Colaborador", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CpfVO", "Cpf", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("ColaboradorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("ColaboradorId");

                            b1.ToTable("colaborador");

                            b1.WithOwner()
                                .HasForeignKey("ColaboradorId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Fornecedor.Fornecedor", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("FornecedorId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("FornecedorId");

                            b1.ToTable("fornecedor");

                            b1.WithOwner()
                                .HasForeignKey("FornecedorId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Empresa", b =>
                {
                    b.OwnsOne("Core.ValueObjects.CnpjVO", "Cnpj", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Cnpj")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "NomeFantasia", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome_fantasia");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.OwnsOne("Core.ValueObjects.NomeVO", "RazaoSocial", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("razao_social");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("empresa");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("NomeFantasia")
                        .IsRequired();

                    b.Navigation("RazaoSocial")
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.Empresa", "Empresa")
                        .WithMany("Obras")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.DescricaoVO", "Descricao", b1 =>
                        {
                            b1.Property<int>("ObraId")
                                .HasColumnType("integer");

                            b1.Property<string>("Descricao")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("descricao");

                            b1.HasKey("ObraId");

                            b1.ToTable("obra");

                            b1.WithOwner()
                                .HasForeignKey("ObraId");
                        });

                    b.Navigation("Descricao")
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Planejamento", null)
                        .WithMany("Insumos")
                        .HasForeignKey("PlanejamentoId");

                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Unidade", "Unidade")
                        .WithMany("Insumos")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.ValueObjects.NomeVO", "Nome", b1 =>
                        {
                            b1.Property<int>("InsumoId")
                                .HasColumnType("integer");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("nome");

                            b1.HasKey("InsumoId");

                            b1.ToTable("insumo");

                            b1.WithOwner()
                                .HasForeignKey("InsumoId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.Obra", "Obra")
                        .WithMany("Planejamentos")
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.PlanejamentoInsumo", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Insumo", "Insumo")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("InsumoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Planejamento.Planejamento", "Planejamento")
                        .WithMany("PlanejamentosInsumos")
                        .HasForeignKey("PlanejamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumo");

                    b.Navigation("Planejamento");
                });

            modelBuilder.Entity("colaboradores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("colaboradors_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Colaborador", null)
                        .WithMany()
                        .HasForeignKey("colaborador_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Obra.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("empresas_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Obra.Empresa", null)
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedoers_telefones", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Telefone", null)
                        .WithMany()
                        .HasForeignKey("telefone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_emails", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Email", null)
                        .WithMany()
                        .HasForeignKey("email_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fornecedores_enderecos", b =>
                {
                    b.HasOne("Urbamais.Domain.Entities.CoreRelationManyToMany.Endereco", null)
                        .WithMany()
                        .HasForeignKey("endereco_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Urbamais.Domain.Entities.Fornecedor.Fornecedor", null)
                        .WithMany()
                        .HasForeignKey("fornecedor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.CoreRelationManyToMany.Cidade", b =>
                {
                    b.Navigation("Enderecos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Empresa", b =>
                {
                    b.Navigation("Obras");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Obra.Obra", b =>
                {
                    b.Navigation("Planejamentos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Insumo", b =>
                {
                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Planejamento", b =>
                {
                    b.Navigation("Insumos");

                    b.Navigation("PlanejamentosInsumos");
                });

            modelBuilder.Entity("Urbamais.Domain.Entities.Planejamento.Unidade", b =>
                {
                    b.Navigation("Insumos");
                });
#pragma warning restore 612, 618
        }
    }
}
